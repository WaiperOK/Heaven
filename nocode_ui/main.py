"""
Heaven AI Arena - No Code UI
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –±–µ–∑ –∫–æ–¥–∞
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import time
import json
import os
from datetime import datetime
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
from sqlalchemy import create_engine, text
import uuid

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LLM_SERVICE_URL = os.getenv("LLM_SERVICE_URL", "http://localhost:8000")
ARENA_CORE_URL = os.getenv("ARENA_CORE_URL", "http://localhost:8080")
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://heaven:heaven_pass@postgres:5432/heaven")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Heaven AI Arena - No Code Training",
    page_icon="üåå",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
.main-header {
    font-size: 3rem;
    font-weight: bold;
    color: #4A90E2;
    text-align: center;
    margin-bottom: 2rem;
}

.metric-card {
    background: #f0f2f6;
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #4A90E2;
    margin: 0.5rem 0;
}

.success-box {
    background: #d4edda;
    color: #155724;
    padding: 1rem;
    border-radius: 5px;
    border-left: 4px solid #28a745;
}

.error-box {
    background: #f8d7da;
    color: #721c24;
    padding: 1rem;
    border-radius: 5px;
    border-left: 4px solid #dc3545;
}

.warning-box {
    background: #fff3cd;
    color: #856404;
    padding: 1rem;
    border-radius: 5px;
    border-left: 4px solid #ffc107;
}
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<h1 class="main-header">üåå Heaven AI Arena</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">No Code Training Interface</p>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
@st.cache_data(ttl=30)
def get_llm_service_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ LLM —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/health", timeout=5)
        return response.json() if response.status_code == 200 else None
    except:
        return None

@st.cache_data(ttl=60)
def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/models", timeout=10)
        return response.json() if response.status_code == 200 else []
    except:
        return []

def start_training(training_config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.post(
            f"{LLM_SERVICE_URL}/train",
            json=training_config,
            timeout=30
        )
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return None

def get_training_status(task_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    try:
        response = requests.get(f"{LLM_SERVICE_URL}/training/{task_id}", timeout=10)
        return response.json() if response.status_code == 200 else None
    except:
        return None

def test_model_generation(model_name, prompt):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª—å—é"""
    try:
        response = requests.post(
            f"{LLM_SERVICE_URL}/generate",
            json={
                "model": model_name,
                "prompt": prompt,
                "max_tokens": 100,
                "temperature": 0.7
            },
            timeout=30
        )
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
with st.sidebar:
    selected = option_menu(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        ["–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", "–î–∞—Ç–∞—Å–µ—Ç—ã", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"],
        icons=["speedometer2", "cpu", "database", "play-circle", "graph-up"],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"padding": "0!important", "background-color": "#fafafa"},
            "icon": {"color": "#4A90E2", "font-size": "18px"},
            "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px", "--hover-color": "#eee"},
            "nav-link-selected": {"background-color": "#4A90E2"},
        }
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
health_status = get_llm_service_health()
if health_status:
    st.sidebar.success(f"‚úÖ LLM Service: {health_status['status']}")
    st.sidebar.info(f"Device: {health_status['device']}")
    st.sidebar.info(f"Models loaded: {health_status['models_loaded']}")
else:
    st.sidebar.error("‚ùå LLM Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if selected == "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
    st.header("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π", len(get_available_models()))
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", 0)  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    
    with col3:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏–π", 0)  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
    
    with col4:
        st.metric("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "–û–Ω–ª–∞–π–Ω" if health_status else "–û—Ñ–ª–∞–π–Ω")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    st.subheader("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    models = get_available_models()
    
    if models:
        df_models = pd.DataFrame(models)
        df_models['created_at'] = pd.to_datetime(df_models['created_at'])
        st.dataframe(df_models, use_container_width=True)
    else:
        st.warning("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è
    st.subheader("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è")
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
elif selected == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
    st.header("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    # –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è
    with st.form("training_form"):
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
            available_models = get_available_models()
            model_names = [m['name'] for m in available_models if m['type'] in ['hf', 'ollama']]
            
            base_model = st.selectbox(
                "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å",
                options=model_names,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"
            )
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            epochs = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", 1, 10, 3)
            learning_rate = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", value=2e-4, format="%.6f")
            batch_size = st.slider("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞", 1, 32, 4)
            
        with col2:
            # LoRA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            lora_rank = st.slider("LoRA Rank", 1, 128, 16)
            lora_alpha = st.slider("LoRA Alpha", 1, 256, 32)
            use_quantization = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é", value=True)
            
            # –í—ã—Ö–æ–¥–Ω–∞—è –º–æ–¥–µ–ª—å
            output_name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏",
                value=f"fine_tuned_{base_model}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
        
        # –î–∞—Ç–∞—Å–µ—Ç
        st.subheader("–î–∞—Ç–∞—Å–µ—Ç")
        dataset_source = st.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞",
            ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"]
        )
        
        dataset_path = None
        if dataset_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSONL —Ñ–∞–π–ª",
                type=['jsonl'],
                help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏ 'instruction', 'input', 'output'"
            )
            
            if uploaded_file:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                dataset_path = f"/app/data/uploads/{uploaded_file.name}"
                # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
                st.success(f"–§–∞–π–ª {uploaded_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            dataset_path = st.text_input("–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É", value="/app/data/training_data.jsonl")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        config = {
            "model_name": base_model,
            "dataset_path": dataset_path,
            "output_name": output_name,
            "epochs": epochs,
            "learning_rate": learning_rate,
            "batch_size": batch_size,
            "lora_rank": lora_rank,
            "lora_alpha": lora_alpha,
            "use_quantization": use_quantization
        }
        
        st.json(config)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        submitted = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        
        if submitted:
            if not dataset_path:
                st.error("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            else:
                with st.spinner("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è..."):
                    result = start_training(config)
                    
                    if result:
                        st.success(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! Task ID: {result['task_id']}")
                        st.session_state.current_task_id = result['task_id']
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    if 'current_task_id' in st.session_state:
        st.subheader("üìä –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")
        
        task_id = st.session_state.current_task_id
        status = get_training_status(task_id)
        
        if status:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("–°—Ç–∞—Ç—É—Å", status['status'])
            
            with col2:
                st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{status.get('progress', 0):.1f}%")
            
            with col3:
                st.metric("Task ID", task_id)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            if status['status'] == 'running':
                progress = status.get('progress', 0) / 100
                st.progress(progress)
                
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                    st.experimental_rerun()
            
            elif status['status'] == 'completed':
                st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                if st.button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å"):
                    st.session_state.test_model = status['output_name']
                    st.experimental_rerun()
            
            elif status['status'] == 'failed':
                st.error(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {status.get('error_message', 'Unknown error')}")
        
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")

# –î–∞—Ç–∞—Å–µ—Ç—ã
elif selected == "–î–∞—Ç–∞—Å–µ—Ç—ã":
    st.header("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSONL —Ñ–∞–π–ª",
        type=['jsonl', 'json'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"
    )
    
    if uploaded_file:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        
        try:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            lines = uploaded_file.read().decode('utf-8').strip().split('\n')
            sample_data = []
            
            for i, line in enumerate(lines[:5]):  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                try:
                    data = json.loads(line)
                    sample_data.append(data)
                except json.JSONDecodeError:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Å—Ç—Ä–æ–∫–µ {i+1}")
                    break
            
            if sample_data:
                df = pd.DataFrame(sample_data)
                st.dataframe(df, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(lines))
                
                with col2:
                    st.metric("–ö–æ–ª–æ–Ω–∫–∏", len(df.columns))
                
                with col3:
                    st.metric("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{len(uploaded_file.read())} bytes")
                
                # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç"):
                    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ /app/data/
                    st.success("–î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    st.subheader("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç–∞—Å–µ—Ç—ã")
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ /app/data/
    st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
elif selected == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
    st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    available_models = get_available_models()
    model_names = [m['name'] for m in available_models]
    
    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", model_names)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns(2)
    
    with col1:
        temperature = st.slider("Temperature", 0.0, 2.0, 0.7)
        max_tokens = st.slider("Max Tokens", 1, 512, 100)
    
    with col2:
        top_p = st.slider("Top-p", 0.0, 1.0, 0.9)
        system_prompt = st.text_area("System Prompt (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", height=100)
    
    # –í–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
    prompt = st.text_area("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", height=200)
    
    if st.button("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å") and prompt:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."):
            result = test_model_generation(selected_model, prompt)
            
            if result:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                st.write(result['text'])
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", result['tokens_used'])
                
                with col2:
                    st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result['processing_time_ms']} –º—Å")
                
                with col3:
                    st.metric("–ú–æ–¥–µ–ª—å", result['model_name'])
            
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
elif selected == "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
    st.header("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if health_status:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°–æ—Å—Ç–æ—è–Ω–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞")
            st.json(health_status)
        
        with col2:
            st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
            # TODO: –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
    
    # –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    sample_data = {
        'timestamp': pd.date_range(start='2024-01-01', periods=100, freq='H'),
        'requests': np.random.randint(1, 50, 100),
        'response_time': np.random.uniform(100, 5000, 100)
    }
    
    df = pd.DataFrame(sample_data)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    fig_requests = px.line(df, x='timestamp', y='requests', title='–ó–∞–ø—Ä–æ—Å—ã –≤ —á–∞—Å')
    st.plotly_chart(fig_requests, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    fig_response = px.line(df, x='timestamp', y='response_time', title='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å)')
    st.plotly_chart(fig_response, use_container_width=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("¬© 2024 Heaven AI Arena Team. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
if 'current_task_id' in st.session_state:
    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å st.experimental_rerun() 